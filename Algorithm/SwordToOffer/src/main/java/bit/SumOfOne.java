package bit;

import org.junit.Test;

/**
 * 输入一个整数，输出该数二进制表示中 1 的个数。
 * intput：9
 * output：2
 * 要先理解符号运算，左移(相当于乘2^n)、右移(相当于除2^n)、无符号右移(忽略符号位，空位都以0补齐)
 * 负数的二进制表示是该正数的补码表示的
 * 左移： 00001010<<2 = 00101000, 10001010<<3 = 01010000, 左移n位，高位抛弃，低位补0
 * 右移： 00001010>>2 = 00000010, 10001010>>3 = 11110001, 右移n位，正数用0补高位，负数用1补高位
 * 无符号右移：00001010>>2 = 00000010, 10001010>>3 = 10000001, 右移n位，高位补0
 */
public class SumOfOne {

    @Test
    public void test() {

    }

    /**
     * 把一个整数减去1，再和原来的整数做与运算，会把该数最右边的1变成0，此时1的个数+1
     * n     = 1100
     * n - 1 = 1001
     * 相 &  = 1000,最右边的1变成0
     */
    public int sumOfOneByBinary(int n) {
        int cnt = 0;
        while (n != 0) {
            cnt++;
            n &= (n - 1);
        }
        return cnt;
    }
}
